/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: LowState_hx.idl
  Source: LowState_hx.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_LOWSTATE_HX_HPP
#define DDSCXX_LOWSTATE_HX_HPP

#include "BmsState_hx.hpp"

#include "IMUState_hx.hpp"

#include "MotorState_hx.hpp"

#include <cstdint>
#include <array>

namespace unitree_hx
{
namespace msg
{
namespace dds_
{
class LowState_
{
private:
 std::array<uint8_t, 2> head_ = { };
 std::array<uint32_t, 2> version_ = { };
 uint32_t tick_ = 0;
 ::unitree_hx::msg::dds_::IMUState_ imu_state_;
 std::array<::unitree_hx::msg::dds_::MotorState_, 30> motor_state_ = { };
 ::unitree_hx::msg::dds_::BmsState_ bms_state_;
 std::array<int16_t, 4> foot_force_state_ = { };
 std::array<int16_t, 4> foot_force_est_state_ = { };
 std::array<uint8_t, 40> wireless_remote_ = { };
 std::array<int16_t, 10> temperature_ = { };
 std::array<float, 10> value_ = { };
 std::array<uint16_t, 10> fan_state_ = { };
 std::array<uint32_t, 10> state_ = { };
 std::array<uint8_t, 64> data_ = { };
 std::array<uint32_t, 2> reserve_ = { };
 uint32_t crc_ = 0;

public:
  LowState_() = default;

  explicit LowState_(
    const std::array<uint8_t, 2>& head,
    const std::array<uint32_t, 2>& version,
    uint32_t tick,
    const ::unitree_hx::msg::dds_::IMUState_& imu_state,
    const std::array<::unitree_hx::msg::dds_::MotorState_, 30>& motor_state,
    const ::unitree_hx::msg::dds_::BmsState_& bms_state,
    const std::array<int16_t, 4>& foot_force_state,
    const std::array<int16_t, 4>& foot_force_est_state,
    const std::array<uint8_t, 40>& wireless_remote,
    const std::array<int16_t, 10>& temperature,
    const std::array<float, 10>& value,
    const std::array<uint16_t, 10>& fan_state,
    const std::array<uint32_t, 10>& state,
    const std::array<uint8_t, 64>& data,
    const std::array<uint32_t, 2>& reserve,
    uint32_t crc) :
    head_(head),
    version_(version),
    tick_(tick),
    imu_state_(imu_state),
    motor_state_(motor_state),
    bms_state_(bms_state),
    foot_force_state_(foot_force_state),
    foot_force_est_state_(foot_force_est_state),
    wireless_remote_(wireless_remote),
    temperature_(temperature),
    value_(value),
    fan_state_(fan_state),
    state_(state),
    data_(data),
    reserve_(reserve),
    crc_(crc) { }

  const std::array<uint8_t, 2>& head() const { return this->head_; }
  std::array<uint8_t, 2>& head() { return this->head_; }
  void head(const std::array<uint8_t, 2>& _val_) { this->head_ = _val_; }
  void head(std::array<uint8_t, 2>&& _val_) { this->head_ = _val_; }
  const std::array<uint32_t, 2>& version() const { return this->version_; }
  std::array<uint32_t, 2>& version() { return this->version_; }
  void version(const std::array<uint32_t, 2>& _val_) { this->version_ = _val_; }
  void version(std::array<uint32_t, 2>&& _val_) { this->version_ = _val_; }
  uint32_t tick() const { return this->tick_; }
  uint32_t& tick() { return this->tick_; }
  void tick(uint32_t _val_) { this->tick_ = _val_; }
  const ::unitree_hx::msg::dds_::IMUState_& imu_state() const { return this->imu_state_; }
  ::unitree_hx::msg::dds_::IMUState_& imu_state() { return this->imu_state_; }
  void imu_state(const ::unitree_hx::msg::dds_::IMUState_& _val_) { this->imu_state_ = _val_; }
  void imu_state(::unitree_hx::msg::dds_::IMUState_&& _val_) { this->imu_state_ = _val_; }
  const std::array<::unitree_hx::msg::dds_::MotorState_, 30>& motor_state() const { return this->motor_state_; }
  std::array<::unitree_hx::msg::dds_::MotorState_, 30>& motor_state() { return this->motor_state_; }
  void motor_state(const std::array<::unitree_hx::msg::dds_::MotorState_, 30>& _val_) { this->motor_state_ = _val_; }
  void motor_state(std::array<::unitree_hx::msg::dds_::MotorState_, 30>&& _val_) { this->motor_state_ = _val_; }
  const ::unitree_hx::msg::dds_::BmsState_& bms_state() const { return this->bms_state_; }
  ::unitree_hx::msg::dds_::BmsState_& bms_state() { return this->bms_state_; }
  void bms_state(const ::unitree_hx::msg::dds_::BmsState_& _val_) { this->bms_state_ = _val_; }
  void bms_state(::unitree_hx::msg::dds_::BmsState_&& _val_) { this->bms_state_ = _val_; }
  const std::array<int16_t, 4>& foot_force_state() const { return this->foot_force_state_; }
  std::array<int16_t, 4>& foot_force_state() { return this->foot_force_state_; }
  void foot_force_state(const std::array<int16_t, 4>& _val_) { this->foot_force_state_ = _val_; }
  void foot_force_state(std::array<int16_t, 4>&& _val_) { this->foot_force_state_ = _val_; }
  const std::array<int16_t, 4>& foot_force_est_state() const { return this->foot_force_est_state_; }
  std::array<int16_t, 4>& foot_force_est_state() { return this->foot_force_est_state_; }
  void foot_force_est_state(const std::array<int16_t, 4>& _val_) { this->foot_force_est_state_ = _val_; }
  void foot_force_est_state(std::array<int16_t, 4>&& _val_) { this->foot_force_est_state_ = _val_; }
  const std::array<uint8_t, 40>& wireless_remote() const { return this->wireless_remote_; }
  std::array<uint8_t, 40>& wireless_remote() { return this->wireless_remote_; }
  void wireless_remote(const std::array<uint8_t, 40>& _val_) { this->wireless_remote_ = _val_; }
  void wireless_remote(std::array<uint8_t, 40>&& _val_) { this->wireless_remote_ = _val_; }
  const std::array<int16_t, 10>& temperature() const { return this->temperature_; }
  std::array<int16_t, 10>& temperature() { return this->temperature_; }
  void temperature(const std::array<int16_t, 10>& _val_) { this->temperature_ = _val_; }
  void temperature(std::array<int16_t, 10>&& _val_) { this->temperature_ = _val_; }
  const std::array<float, 10>& value() const { return this->value_; }
  std::array<float, 10>& value() { return this->value_; }
  void value(const std::array<float, 10>& _val_) { this->value_ = _val_; }
  void value(std::array<float, 10>&& _val_) { this->value_ = _val_; }
  const std::array<uint16_t, 10>& fan_state() const { return this->fan_state_; }
  std::array<uint16_t, 10>& fan_state() { return this->fan_state_; }
  void fan_state(const std::array<uint16_t, 10>& _val_) { this->fan_state_ = _val_; }
  void fan_state(std::array<uint16_t, 10>&& _val_) { this->fan_state_ = _val_; }
  const std::array<uint32_t, 10>& state() const { return this->state_; }
  std::array<uint32_t, 10>& state() { return this->state_; }
  void state(const std::array<uint32_t, 10>& _val_) { this->state_ = _val_; }
  void state(std::array<uint32_t, 10>&& _val_) { this->state_ = _val_; }
  const std::array<uint8_t, 64>& data() const { return this->data_; }
  std::array<uint8_t, 64>& data() { return this->data_; }
  void data(const std::array<uint8_t, 64>& _val_) { this->data_ = _val_; }
  void data(std::array<uint8_t, 64>&& _val_) { this->data_ = _val_; }
  const std::array<uint32_t, 2>& reserve() const { return this->reserve_; }
  std::array<uint32_t, 2>& reserve() { return this->reserve_; }
  void reserve(const std::array<uint32_t, 2>& _val_) { this->reserve_ = _val_; }
  void reserve(std::array<uint32_t, 2>&& _val_) { this->reserve_ = _val_; }
  uint32_t crc() const { return this->crc_; }
  uint32_t& crc() { return this->crc_; }
  void crc(uint32_t _val_) { this->crc_ = _val_; }

  bool operator==(const LowState_& _other) const
  {
    (void) _other;
    return head_ == _other.head_ &&
      version_ == _other.version_ &&
      tick_ == _other.tick_ &&
      imu_state_ == _other.imu_state_ &&
      motor_state_ == _other.motor_state_ &&
      bms_state_ == _other.bms_state_ &&
      foot_force_state_ == _other.foot_force_state_ &&
      foot_force_est_state_ == _other.foot_force_est_state_ &&
      wireless_remote_ == _other.wireless_remote_ &&
      temperature_ == _other.temperature_ &&
      value_ == _other.value_ &&
      fan_state_ == _other.fan_state_ &&
      state_ == _other.state_ &&
      data_ == _other.data_ &&
      reserve_ == _other.reserve_ &&
      crc_ == _other.crc_;
  }

  bool operator!=(const LowState_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_hx::msg::dds_::LowState_>::getTypeName()
{
  return "unitree_hx::msg::dds_::LowState_";
}

template <> constexpr bool TopicTraits<::unitree_hx::msg::dds_::LowState_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_hx::msg::dds_::LowState_>::type_map_blob_sz() { return 3364; }
template<> constexpr unsigned int TopicTraits<::unitree_hx::msg::dds_::LowState_>::type_info_blob_sz() { return 244; }
template<> inline const uint8_t * TopicTraits<::unitree_hx::msg::dds_::LowState_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xde,  0x04,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf1,  0x6e,  0x22,  0x78,  0x21,  0x67,  0x67,  0x63, 
 0x55,  0x22,  0x6d,  0x5f,  0x75,  0x5e,  0xae,  0x00,  0xcf,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0xbf,  0x01,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x02,  0x96,  0xe8,  0x9a,  0x29,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x07,  0x2a,  0xf7,  0x2f,  0x10,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0xe5,  0xe5,  0xc0,  0x75,  0x00,  0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf1,  0x4b,  0x1b,  0xf4,  0xaf,  0x32,  0xe5,  0xbc,  0x67,  0x10,  0xef,  0xc8,  0x29,  0x31, 
 0x15,  0x9e,  0x5f,  0x37,  0x13,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf1,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1e,  0xf1,  0x63,  0xf0, 
 0x5c,  0x7e,  0xe0,  0x2e,  0x99,  0x48,  0xb0,  0xe2,  0xfd,  0x0d,  0xa0,  0xd2,  0xb2,  0x1e,  0x53,  0xdc, 
 0x19,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xed,  0x48,  0xde,  0xce,  0xa6, 
 0xbe,  0x6b,  0x80,  0x71,  0xec,  0x83,  0x0e,  0x6b,  0x6a,  0x7f,  0x6e,  0x62,  0x18,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x04,  0x03,  0x3b,  0x71,  0xa4,  0xa4,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x04,  0x03,  0x26,  0xcc,  0xdb,  0xe3,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x28,  0x02,  0xa8,  0x2f, 
 0x18,  0xc9,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0a,  0x03,  0xee,  0xf4,  0x38,  0xf7,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0a,  0x09,  0x20,  0x63,  0xc1,  0x60,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0a,  0x06,  0x6f,  0x80,  0x17,  0x1f,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0a,  0x07,  0x9e,  0xd3, 
 0x9e,  0x2e,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x40,  0x02,  0x8d,  0x77,  0x7f,  0x38,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x07,  0x9c,  0x3b,  0x62,  0x94,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xf5,  0xad,  0x59,  0xc5,  0xf1,  0x4b,  0x1b,  0xf4,  0xaf, 
 0x32,  0xe5,  0xbc,  0x67,  0x10,  0xef,  0xc8,  0x29,  0x31,  0x15,  0x00,  0x00,  0x93,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x83,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x09,  0x75,  0xb9,  0xaa,  0xa0,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x6b,  0x3b,  0x2d,  0x85,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x09,  0x0e,  0x12,  0x75,  0x69,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0xb0,  0x7d, 
 0x92,  0xed,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0xee, 
 0xf4,  0x38,  0xf7,  0xf1,  0x63,  0xf0,  0x5c,  0x7e,  0xe0,  0x2e,  0x99,  0x48,  0xb0,  0xe2,  0xfd,  0x0d, 
 0xa0,  0xd2,  0x00,  0x00,  0x06,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0xf6,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x15,  0xd6,  0x17,  0x12,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x76,  0x94,  0xf4,  0xa6,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47,  0xbc,  0xdc,  0xd7,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0xe9,  0x16,  0x89,  0x09,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x8a,  0xf7,  0xae,  0xdf,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x6e,  0x96,  0x3d,  0x84,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x30,  0x50,  0xb6,  0xd9,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x4a,  0xe0,  0x48,  0xae,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x04,  0xee,  0xf4,  0x38,  0xf7,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x07,  0xa5,  0xfe, 
 0x26,  0xd5,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x0a, 
 0xcf,  0x8b,  0xe1,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xd1, 
 0x41,  0x1a,  0xed,  0x00,  0x16,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x07,  0x9c,  0x3b,  0x62,  0x94,  0xf1,  0xed, 
 0x48,  0xde,  0xce,  0xa6,  0xbe,  0x6b,  0x80,  0x71,  0xec,  0x83,  0x0e,  0x6b,  0x6a,  0x00,  0x00,  0x00, 
 0x1e,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x0e,  0x01,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x75,  0x6a,  0xda,  0x84,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x51,  0x99,  0x89,  0x90,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x4d,  0x9d,  0x6c,  0x17,  0x00,  0x16,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x28,  0x06,  0x2d,  0x87, 
 0xc3,  0x55,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x06,  0x46,  0x32,  0x3c,  0x06,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x43,  0xb5,  0xc9,  0x17,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0xc7,  0xd5,  0xf8,  0x49,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x17,  0x39,  0xe7,  0x01,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0c,  0x03,  0xee,  0xf4,  0x38,  0xf7,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x9a,  0x4c,  0x07,  0x40,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0xe9,  0x68,  0x5d,  0x46,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x05,  0x07,  0x35,  0x33,  0xbf,  0xfb,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x07,  0x9c,  0x3b, 
 0x62,  0x94,  0x00,  0x00,  0xba,  0x07,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x2b,  0xaf,  0xc3, 
 0x46,  0xf9,  0x7f,  0x58,  0xef,  0x33,  0x5e,  0x87,  0x2d,  0xf2,  0x77,  0x00,  0xc2,  0x02,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a, 
 0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4c,  0x6f,  0x77,  0x53,  0x74,  0x61,  0x74,  0x65,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x8a,  0x02,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x02,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64,  0x00,  0x00,  0x00,  0x00, 
 0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x76,  0x65,  0x72,  0x73, 
 0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x05,  0x00,  0x00,  0x00,  0x74,  0x69,  0x63,  0x6b,  0x00,  0x00,  0x00,  0x00, 
 0x28,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xe9,  0x0f,  0x3a,  0xf0,  0x14, 
 0x14,  0xd4,  0x93,  0x6d,  0xf0,  0x5b,  0x17,  0x20,  0x75,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x69,  0x6d,  0x75,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x32,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf2,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x1e,  0xf2,  0x14,  0x0f,  0x52,  0x91,  0xae,  0x8c,  0x0e,  0x62,  0x18,  0x0b,  0x61,  0xaf,  0x97,  0x3b, 
 0x0c,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f,  0x72,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xfe, 
 0xa5,  0x4c,  0x98,  0x65,  0x40,  0x30,  0xb3,  0x98,  0xdd,  0x28,  0x16,  0xe0,  0xe4,  0x00,  0x00,  0x00, 
 0x0a,  0x00,  0x00,  0x00,  0x62,  0x6d,  0x73,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00, 
 0x2b,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x04,  0x03,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x66,  0x6f,  0x6f,  0x74, 
 0x5f,  0x66,  0x6f,  0x72,  0x63,  0x65,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x2f,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x04,  0x03,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x66,  0x6f,  0x6f,  0x74, 
 0x5f,  0x66,  0x6f,  0x72,  0x63,  0x65,  0x5f,  0x65,  0x73,  0x74,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x2a,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x28,  0x02,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00, 
 0x77,  0x69,  0x72,  0x65,  0x6c,  0x65,  0x73,  0x73,  0x5f,  0x72,  0x65,  0x6d,  0x6f,  0x74,  0x65,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0a,  0x03,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0a,  0x09,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x76,  0x61,  0x6c,  0x75, 
 0x65,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0a,  0x06,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x66,  0x61,  0x6e,  0x5f,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0a,  0x07,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x40,  0x02,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x0e,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x0f,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x04,  0x00,  0x00,  0x00,  0x63,  0x72,  0x63,  0x00, 
 0x00,  0x00,  0xf2,  0xe9,  0x0f,  0x3a,  0xf0,  0x14,  0x14,  0xd4,  0x93,  0x6d,  0xf0,  0x5b,  0x17,  0x20, 
 0x75,  0x00,  0x00,  0x00,  0xfe,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f, 
 0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x49, 
 0x4d,  0x55,  0x53,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0xc6,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x04,  0x09,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x71,  0x75,  0x61,  0x74,  0x65,  0x72,  0x6e,  0x69,  0x6f,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x24,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x67,  0x79,  0x72,  0x6f, 
 0x73,  0x63,  0x6f,  0x70,  0x65,  0x00,  0x00,  0x00,  0x28,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x00,  0x00, 
 0x0e,  0x00,  0x00,  0x00,  0x61,  0x63,  0x63,  0x65,  0x6c,  0x65,  0x72,  0x6f,  0x6d,  0x65,  0x74,  0x65, 
 0x72,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x09,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x72,  0x70,  0x79,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74, 
 0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x14,  0x0f,  0x52,  0x91,  0xae,  0x8c,  0x0e,  0x62,  0x18, 
 0x0b,  0x61,  0xaf,  0x97,  0x3b,  0x00,  0x00,  0x00,  0xb6,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x2b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74, 
 0x72,  0x65,  0x65,  0x5f,  0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73, 
 0x5f,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x53,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x00,  0x00, 
 0x7e,  0x01,  0x00,  0x00,  0x0d,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0x00,  0x05,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x64,  0x65,  0x00,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x71,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x64,  0x71,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x04,  0x00,  0x00,  0x00,  0x64,  0x64,  0x71,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x74,  0x61,  0x75,  0x5f,  0x65,  0x73,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x71,  0x5f,  0x72,  0x61,  0x77,  0x00,  0x00,  0x00,  0x15,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x07,  0x00,  0x00,  0x00,  0x64,  0x71,  0x5f,  0x72,  0x61,  0x77,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x64,  0x64,  0x71,  0x5f,  0x72,  0x61,  0x77,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x26,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x04,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70, 
 0x65,  0x72,  0x61,  0x74,  0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x07,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x73,  0x65,  0x6e,  0x73,  0x6f,  0x72,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x76,  0x6f,  0x6c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f, 
 0x72,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x04,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00, 
 0x00,  0x00,  0xf2,  0xfe,  0xa5,  0x4c,  0x98,  0x65,  0x40,  0x30,  0xb3,  0x98,  0xdd,  0x28,  0x16,  0xe0, 
 0xe4,  0x00,  0x00,  0x00,  0xea,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f, 
 0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x42, 
 0x6d,  0x73,  0x53,  0x74,  0x61,  0x74,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0xb2,  0x01,  0x00,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x1b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x0d,  0x00,  0x00,  0x00,  0x76,  0x65,  0x72,  0x73,  0x69,  0x6f,  0x6e,  0x5f,  0x68,  0x69,  0x67,  0x68, 
 0x00,  0x00,  0x00,  0x00,  0x1a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x76,  0x65,  0x72,  0x73,  0x69,  0x6f,  0x6e,  0x5f,  0x6c,  0x6f,  0x77,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x66,  0x6e,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x28,  0x06,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x63,  0x65,  0x6c,  0x6c,  0x5f,  0x76,  0x6f,  0x6c, 
 0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x06,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x62,  0x6d,  0x73,  0x76,  0x6f,  0x6c,  0x74,  0x61,  0x67,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x63,  0x75,  0x72,  0x72,  0x65,  0x6e,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x6f,  0x63,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x73,  0x6f,  0x68,  0x00,  0x00,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0c,  0x03,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x74,  0x65,  0x6d,  0x70,  0x65,  0x72,  0x61,  0x74, 
 0x75,  0x72,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x06,  0x00,  0x06,  0x00,  0x00,  0x00,  0x63,  0x79,  0x63,  0x6c,  0x65,  0x00,  0x00,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x01,  0x00,  0x06,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x6d,  0x61,  0x6e,  0x75,  0x66,  0x61,  0x63,  0x74,  0x75,  0x72,  0x65,  0x72,  0x5f,  0x64,  0x61,  0x74, 
 0x65,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x05,  0x07,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x62,  0x6d,  0x73,  0x73,  0x74,  0x61,  0x74,  0x65,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x03,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x7c,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0xf2,  0x2b,  0xaf,  0xc3, 
 0x46,  0xf9,  0x7f,  0x58,  0xef,  0x33,  0x5e,  0x87,  0x2d,  0xf2,  0x77,  0xf1,  0x6e,  0x22,  0x78,  0x21, 
 0x67,  0x67,  0x63,  0x55,  0x22,  0x6d,  0x5f,  0x75,  0x5e,  0xae,  0xf2,  0xe9,  0x0f,  0x3a,  0xf0,  0x14, 
 0x14,  0xd4,  0x93,  0x6d,  0xf0,  0x5b,  0x17,  0x20,  0x75,  0xf1,  0x4b,  0x1b,  0xf4,  0xaf,  0x32,  0xe5, 
 0xbc,  0x67,  0x10,  0xef,  0xc8,  0x29,  0x31,  0x15,  0xf2,  0x14,  0x0f,  0x52,  0x91,  0xae,  0x8c,  0x0e, 
 0x62,  0x18,  0x0b,  0x61,  0xaf,  0x97,  0x3b,  0xf1,  0x63,  0xf0,  0x5c,  0x7e,  0xe0,  0x2e,  0x99,  0x48, 
 0xb0,  0xe2,  0xfd,  0x0d,  0xa0,  0xd2,  0xf2,  0xfe,  0xa5,  0x4c,  0x98,  0x65,  0x40,  0x30,  0xb3,  0x98, 
 0xdd,  0x28,  0x16,  0xe0,  0xe4,  0xf1,  0xed,  0x48,  0xde,  0xce,  0xa6,  0xbe,  0x6b,  0x80,  0x71,  0xec, 
 0x83,  0x0e,  0x6b,  0x6a, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_hx::msg::dds_::LowState_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xf0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x6e,  0x22,  0x78,  0x21,  0x67,  0x67,  0x63,  0x55,  0x22,  0x6d,  0x5f, 
 0x75,  0x5e,  0xae,  0x00,  0xd3,  0x01,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x4b,  0x1b,  0xf4,  0xaf,  0x32,  0xe5,  0xbc, 
 0x67,  0x10,  0xef,  0xc8,  0x29,  0x31,  0x15,  0x00,  0x97,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x63,  0xf0,  0x5c,  0x7e,  0xe0,  0x2e,  0x99,  0x48,  0xb0,  0xe2,  0xfd,  0x0d,  0xa0,  0xd2,  0x00, 
 0x0a,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xed,  0x48,  0xde,  0xce,  0xa6,  0xbe,  0x6b, 
 0x80,  0x71,  0xec,  0x83,  0x0e,  0x6b,  0x6a,  0x00,  0x22,  0x01,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x2b,  0xaf,  0xc3, 
 0x46,  0xf9,  0x7f,  0x58,  0xef,  0x33,  0x5e,  0x87,  0x2d,  0xf2,  0x77,  0x00,  0xc6,  0x02,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xe9,  0x0f,  0x3a,  0xf0,  0x14,  0x14,  0xd4,  0x93,  0x6d,  0xf0,  0x5b,  0x17,  0x20,  0x75,  0x00, 
 0x02,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x14,  0x0f,  0x52,  0x91,  0xae,  0x8c,  0x0e, 
 0x62,  0x18,  0x0b,  0x61,  0xaf,  0x97,  0x3b,  0x00,  0xba,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xfe,  0xa5,  0x4c,  0x98,  0x65,  0x40,  0x30,  0xb3,  0x98,  0xdd,  0x28,  0x16,  0xe0,  0xe4,  0x00, 
 0xee,  0x01,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_hx::msg::dds_::LowState_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_hx::msg::dds_::LowState_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_hx::msg::dds_::LowState_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_hx::msg::dds_::LowState_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_hx::msg::dds_::LowState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.tick()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.imu_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_state()) {  //array depth 1
      if (!write(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.bms_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.foot_force_state()[0], instance.foot_force_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.foot_force_est_state()[0], instance.foot_force_est_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.wireless_remote()[0], instance.wireless_remote().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.temperature()[0], instance.temperature().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.value()[0], instance.value().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.fan_state()[0], instance.fan_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.state()[0], instance.state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_hx::msg::dds_::LowState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowState_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_hx::msg::dds_::LowState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.tick()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.imu_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (auto & a_1:instance.motor_state()) {  //array depth 1
      if (!read(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.bms_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.foot_force_state()[0], instance.foot_force_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.foot_force_est_state()[0], instance.foot_force_est_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.wireless_remote()[0], instance.wireless_remote().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.temperature()[0], instance.temperature().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.value()[0], instance.value().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.fan_state()[0], instance.fan_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.state()[0], instance.state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_hx::msg::dds_::LowState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowState_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_hx::msg::dds_::LowState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.tick()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.imu_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_state()) {  //array depth 1
      if (!move(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.bms_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.foot_force_state()[0], instance.foot_force_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.foot_force_est_state()[0], instance.foot_force_est_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.wireless_remote()[0], instance.wireless_remote().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.temperature()[0], instance.temperature().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.value()[0], instance.value().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.fan_state()[0], instance.fan_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.state()[0], instance.state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_hx::msg::dds_::LowState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowState_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_hx::msg::dds_::LowState_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.tick()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.imu_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_state()) {  //array depth 1
      if (!max(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.bms_state(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.foot_force_state()[0], instance.foot_force_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.foot_force_est_state()[0], instance.foot_force_est_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.wireless_remote()[0], instance.wireless_remote().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.temperature()[0], instance.temperature().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 10:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.value()[0], instance.value().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 11:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.fan_state()[0], instance.fan_state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 12:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.state()[0], instance.state().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 13:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 14:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 15:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_hx::msg::dds_::LowState_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowState_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_LOWSTATE_HX_HPP
