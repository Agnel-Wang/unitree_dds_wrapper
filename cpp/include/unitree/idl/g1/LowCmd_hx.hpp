/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: LowCmd_hx.idl
  Source: LowCmd_hx.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_LOWCMD_HX_HPP
#define DDSCXX_LOWCMD_HX_HPP

#include "BmsCmd_hx.hpp"

#include "MotorCmd_hx.hpp"

#include <cstdint>
#include <array>

namespace unitree_hx
{
namespace msg
{
namespace dds_
{
class LowCmd_
{
private:
 std::array<uint8_t, 2> head_ = { };
 std::array<uint32_t, 2> version_ = { };
 std::array<::unitree_hx::msg::dds_::MotorCmd_, 30> motor_cmd_ = { };
 ::unitree_hx::msg::dds_::BmsCmd_ bms_cmd_;
 std::array<uint8_t, 10> led_cmd_ = { };
 std::array<uint8_t, 10> fan_cmd_ = { };
 std::array<uint8_t, 20> cmd_ = { };
 std::array<uint8_t, 64> data_ = { };
 std::array<uint32_t, 2> reserve_ = { };
 uint32_t crc_ = 0;

public:
  LowCmd_() = default;

  explicit LowCmd_(
    const std::array<uint8_t, 2>& head,
    const std::array<uint32_t, 2>& version,
    const std::array<::unitree_hx::msg::dds_::MotorCmd_, 30>& motor_cmd,
    const ::unitree_hx::msg::dds_::BmsCmd_& bms_cmd,
    const std::array<uint8_t, 10>& led_cmd,
    const std::array<uint8_t, 10>& fan_cmd,
    const std::array<uint8_t, 20>& cmd,
    const std::array<uint8_t, 64>& data,
    const std::array<uint32_t, 2>& reserve,
    uint32_t crc) :
    head_(head),
    version_(version),
    motor_cmd_(motor_cmd),
    bms_cmd_(bms_cmd),
    led_cmd_(led_cmd),
    fan_cmd_(fan_cmd),
    cmd_(cmd),
    data_(data),
    reserve_(reserve),
    crc_(crc) { }

  const std::array<uint8_t, 2>& head() const { return this->head_; }
  std::array<uint8_t, 2>& head() { return this->head_; }
  void head(const std::array<uint8_t, 2>& _val_) { this->head_ = _val_; }
  void head(std::array<uint8_t, 2>&& _val_) { this->head_ = _val_; }
  const std::array<uint32_t, 2>& version() const { return this->version_; }
  std::array<uint32_t, 2>& version() { return this->version_; }
  void version(const std::array<uint32_t, 2>& _val_) { this->version_ = _val_; }
  void version(std::array<uint32_t, 2>&& _val_) { this->version_ = _val_; }
  const std::array<::unitree_hx::msg::dds_::MotorCmd_, 30>& motor_cmd() const { return this->motor_cmd_; }
  std::array<::unitree_hx::msg::dds_::MotorCmd_, 30>& motor_cmd() { return this->motor_cmd_; }
  void motor_cmd(const std::array<::unitree_hx::msg::dds_::MotorCmd_, 30>& _val_) { this->motor_cmd_ = _val_; }
  void motor_cmd(std::array<::unitree_hx::msg::dds_::MotorCmd_, 30>&& _val_) { this->motor_cmd_ = _val_; }
  const ::unitree_hx::msg::dds_::BmsCmd_& bms_cmd() const { return this->bms_cmd_; }
  ::unitree_hx::msg::dds_::BmsCmd_& bms_cmd() { return this->bms_cmd_; }
  void bms_cmd(const ::unitree_hx::msg::dds_::BmsCmd_& _val_) { this->bms_cmd_ = _val_; }
  void bms_cmd(::unitree_hx::msg::dds_::BmsCmd_&& _val_) { this->bms_cmd_ = _val_; }
  const std::array<uint8_t, 10>& led_cmd() const { return this->led_cmd_; }
  std::array<uint8_t, 10>& led_cmd() { return this->led_cmd_; }
  void led_cmd(const std::array<uint8_t, 10>& _val_) { this->led_cmd_ = _val_; }
  void led_cmd(std::array<uint8_t, 10>&& _val_) { this->led_cmd_ = _val_; }
  const std::array<uint8_t, 10>& fan_cmd() const { return this->fan_cmd_; }
  std::array<uint8_t, 10>& fan_cmd() { return this->fan_cmd_; }
  void fan_cmd(const std::array<uint8_t, 10>& _val_) { this->fan_cmd_ = _val_; }
  void fan_cmd(std::array<uint8_t, 10>&& _val_) { this->fan_cmd_ = _val_; }
  const std::array<uint8_t, 20>& cmd() const { return this->cmd_; }
  std::array<uint8_t, 20>& cmd() { return this->cmd_; }
  void cmd(const std::array<uint8_t, 20>& _val_) { this->cmd_ = _val_; }
  void cmd(std::array<uint8_t, 20>&& _val_) { this->cmd_ = _val_; }
  const std::array<uint8_t, 64>& data() const { return this->data_; }
  std::array<uint8_t, 64>& data() { return this->data_; }
  void data(const std::array<uint8_t, 64>& _val_) { this->data_ = _val_; }
  void data(std::array<uint8_t, 64>&& _val_) { this->data_ = _val_; }
  const std::array<uint32_t, 2>& reserve() const { return this->reserve_; }
  std::array<uint32_t, 2>& reserve() { return this->reserve_; }
  void reserve(const std::array<uint32_t, 2>& _val_) { this->reserve_ = _val_; }
  void reserve(std::array<uint32_t, 2>&& _val_) { this->reserve_ = _val_; }
  uint32_t crc() const { return this->crc_; }
  uint32_t& crc() { return this->crc_; }
  void crc(uint32_t _val_) { this->crc_ = _val_; }

  bool operator==(const LowCmd_& _other) const
  {
    (void) _other;
    return head_ == _other.head_ &&
      version_ == _other.version_ &&
      motor_cmd_ == _other.motor_cmd_ &&
      bms_cmd_ == _other.bms_cmd_ &&
      led_cmd_ == _other.led_cmd_ &&
      fan_cmd_ == _other.fan_cmd_ &&
      cmd_ == _other.cmd_ &&
      data_ == _other.data_ &&
      reserve_ == _other.reserve_ &&
      crc_ == _other.crc_;
  }

  bool operator!=(const LowCmd_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::getTypeName()
{
  return "unitree_hx::msg::dds_::LowCmd_";
}

template <> constexpr bool TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::type_map_blob_sz() { return 1550; }
template<> constexpr unsigned int TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::type_info_blob_sz() { return 196; }
template<> inline const uint8_t * TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x3e,  0x02,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf1,  0xee,  0xed,  0xb8,  0x69,  0xfd,  0xaa,  0x48, 
 0x5a,  0xf3,  0x22,  0x25,  0xd0,  0x0a,  0x3d,  0x00,  0x2f,  0x01,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x01,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x02,  0x96,  0xe8,  0x9a,  0x29,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x07,  0x2a,  0xf7,  0x2f,  0x10,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf1,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1e,  0xf1,  0xc8,  0xe5, 
 0x83,  0x5b,  0x0f,  0x0c,  0x17,  0x65,  0xbc,  0x23,  0x1d,  0xfa,  0x02,  0xff,  0x5b,  0xcf,  0x19,  0xa4, 
 0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x91,  0xa3,  0x78,  0x24,  0x46, 
 0xf5,  0xc1,  0xa3,  0xbe,  0x38,  0x87,  0x82,  0x38,  0xf4,  0x11,  0x50,  0x97,  0xc7,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x0a,  0x02,  0x5e,  0x09,  0xb1,  0x5f,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0a,  0x02,  0xf6,  0x80,  0xa6,  0xca,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x02,  0xdf,  0xff, 
 0x0a,  0x7f,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x40,  0x02,  0x8d,  0x77,  0x7f,  0x38,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x02,  0x07,  0x9c,  0x3b,  0x62,  0x94,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xf5,  0xad,  0x59,  0xc5,  0xf1,  0xc8,  0xe5,  0x83,  0x5b, 
 0x0f,  0x0c,  0x17,  0x65,  0xbc,  0x23,  0x1d,  0xfa,  0x02,  0xff,  0x00,  0x00,  0x8e,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x7e,  0x00,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x15, 
 0xd6,  0x17,  0x12,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x76, 
 0x94,  0xf4,  0xa6,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x47, 
 0xbc,  0xdc,  0xd7,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x45, 
 0x80,  0xc2,  0x74,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x26, 
 0xb5,  0x68,  0xe4,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x87, 
 0x22,  0x16,  0x52,  0x00,  0x16,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x07,  0x9c,  0x3b,  0x62,  0x94,  0xf1,  0x91, 
 0xa3,  0x78,  0x24,  0x46,  0xf5,  0xc1,  0xa3,  0xbe,  0x38,  0x87,  0x82,  0x38,  0xf4,  0x00,  0x00,  0x00, 
 0x3e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x02,  0xdf,  0xff,  0x0a,  0x7f,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x28,  0x02,  0x9c,  0x3b, 
 0x62,  0x94,  0x00,  0x00,  0x62,  0x03,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0xf2,  0x56,  0x5f,  0x47, 
 0xa3,  0x48,  0x73,  0x21,  0x37,  0x00,  0x13,  0x49,  0xa3,  0xac,  0x9f,  0x00,  0xba,  0x01,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00, 
 0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a, 
 0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4c,  0x6f,  0x77,  0x43,  0x6d,  0x64,  0x5f,  0x00,  0x00, 
 0x86,  0x01,  0x00,  0x00,  0x0a,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x02,  0x02,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x76,  0x65,  0x72,  0x73,  0x69,  0x6f,  0x6e,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x30,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf2, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1e,  0xf2,  0xb0,  0xc1,  0xae,  0x45,  0x7d,  0xd6, 
 0x52,  0x38,  0xb1,  0x1d,  0x93,  0x38,  0x0f,  0x03,  0x0a,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x74,  0x6f, 
 0x72,  0x5f,  0x63,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x26,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0x40,  0x09,  0xa7,  0x9e,  0x2d,  0x21,  0x98,  0x0e,  0x5f,  0x92,  0x4a,  0xc4,  0x42, 
 0x16,  0x00,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x62,  0x6d,  0x73,  0x5f,  0x63,  0x6d,  0x64,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x0a,  0x02,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6c,  0x65,  0x64,  0x5f,  0x63,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x0a,  0x02,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x66,  0x61,  0x6e,  0x5f,  0x63,  0x6d,  0x64,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x02,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x63,  0x6d,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1f,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x40,  0x02,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x64,  0x61,  0x74,  0x61,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x02,  0x07,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00,  0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x09,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x63,  0x72,  0x63,  0x00,  0x00,  0x00,  0xf2,  0xb0,  0xc1,  0xae,  0x45,  0x7d, 
 0xd6,  0x52,  0x38,  0xb1,  0x1d,  0x93,  0x38,  0x0f,  0x03,  0x00,  0x00,  0x00,  0xee,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x29,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x21,  0x00,  0x00,  0x00, 
 0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x68,  0x78,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a, 
 0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4d,  0x6f,  0x74,  0x6f,  0x72,  0x43,  0x6d,  0x64,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0xb6,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x13,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00,  0x05,  0x00,  0x00,  0x00,  0x6d,  0x6f,  0x64,  0x65, 
 0x00,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x64,  0x71,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x74,  0x61,  0x75,  0x00,  0x00,  0x00,  0x00,  0x00,  0x11,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00,  0x6b,  0x70,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x01,  0x00,  0x09,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x6b,  0x64,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x90,  0xf3,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x03,  0x07,  0x00,  0x00, 
 0x08,  0x00,  0x00,  0x00,  0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00,  0x00,  0x00,  0xf2,  0x40, 
 0x09,  0xa7,  0x9e,  0x2d,  0x21,  0x98,  0x0e,  0x5f,  0x92,  0x4a,  0xc4,  0x42,  0x16,  0x00,  0x00,  0x00, 
 0x76,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x27,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x1f,  0x00,  0x00,  0x00,  0x75,  0x6e,  0x69,  0x74,  0x72,  0x65,  0x65,  0x5f,  0x68,  0x78,  0x3a,  0x3a, 
 0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x42,  0x6d,  0x73,  0x43,  0x6d, 
 0x64,  0x5f,  0x00,  0x00,  0x42,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x02,  0x00,  0x04,  0x00,  0x00,  0x00,  0x63,  0x6d,  0x64,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x90,  0xf3, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x28,  0x02,  0x00,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x72,  0x65,  0x73,  0x65,  0x72,  0x76,  0x65,  0x00,  0x00,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0xf2,  0x56,  0x5f,  0x47,  0xa3,  0x48,  0x73,  0x21,  0x37,  0x00,  0x13,  0x49, 
 0xa3,  0xac,  0x9f,  0xf1,  0xee,  0xed,  0xb8,  0x69,  0xfd,  0xaa,  0x48,  0x5a,  0xf3,  0x22,  0x25,  0xd0, 
 0x0a,  0x3d,  0xf2,  0xb0,  0xc1,  0xae,  0x45,  0x7d,  0xd6,  0x52,  0x38,  0xb1,  0x1d,  0x93,  0x38,  0x0f, 
 0x03,  0xf1,  0xc8,  0xe5,  0x83,  0x5b,  0x0f,  0x0c,  0x17,  0x65,  0xbc,  0x23,  0x1d,  0xfa,  0x02,  0xff, 
 0xf2,  0x40,  0x09,  0xa7,  0x9e,  0x2d,  0x21,  0x98,  0x0e,  0x5f,  0x92,  0x4a,  0xc4,  0x42,  0x16,  0xf1, 
 0x91,  0xa3,  0x78,  0x24,  0x46,  0xf5,  0xc1,  0xa3,  0xbe,  0x38,  0x87,  0x82,  0x38,  0xf4, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::type_info_blob() {
  static const uint8_t blob[] = {
 0xc0,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0xee,  0xed,  0xb8,  0x69,  0xfd,  0xaa,  0x48,  0x5a,  0xf3,  0x22,  0x25, 
 0xd0,  0x0a,  0x3d,  0x00,  0x33,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xc8,  0xe5,  0x83,  0x5b,  0x0f,  0x0c,  0x17, 
 0x65,  0xbc,  0x23,  0x1d,  0xfa,  0x02,  0xff,  0x00,  0x92,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x91,  0xa3,  0x78,  0x24,  0x46,  0xf5,  0xc1,  0xa3,  0xbe,  0x38,  0x87,  0x82,  0x38,  0xf4,  0x00, 
 0x42,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40,  0x58,  0x00,  0x00,  0x00,  0x54,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf2,  0x56,  0x5f,  0x47,  0xa3,  0x48,  0x73,  0x21,  0x37,  0x00,  0x13,  0x49, 
 0xa3,  0xac,  0x9f,  0x00,  0xbe,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xb0,  0xc1,  0xae,  0x45,  0x7d,  0xd6,  0x52, 
 0x38,  0xb1,  0x1d,  0x93,  0x38,  0x0f,  0x03,  0x00,  0xf2,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0x40,  0x09,  0xa7,  0x9e,  0x2d,  0x21,  0x98,  0x0e,  0x5f,  0x92,  0x4a,  0xc4,  0x42,  0x16,  0x00, 
 0x7a,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::unitree_hx::msg::dds_::LowCmd_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::unitree_hx::msg::dds_::LowCmd_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::unitree_hx::msg::dds_::LowCmd_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::unitree_hx::msg::dds_::LowCmd_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::unitree_hx::msg::dds_::LowCmd_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_cmd()) {  //array depth 1
      if (!write(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.bms_cmd(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.led_cmd()[0], instance.led_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.fan_cmd()[0], instance.fan_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.cmd()[0], instance.cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!write(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::unitree_hx::msg::dds_::LowCmd_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowCmd_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::unitree_hx::msg::dds_::LowCmd_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (auto & a_1:instance.motor_cmd()) {  //array depth 1
      if (!read(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.bms_cmd(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.led_cmd()[0], instance.led_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.fan_cmd()[0], instance.fan_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.cmd()[0], instance.cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!read(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::unitree_hx::msg::dds_::LowCmd_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowCmd_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::unitree_hx::msg::dds_::LowCmd_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_cmd()) {  //array depth 1
      if (!move(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.bms_cmd(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.led_cmd()[0], instance.led_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.fan_cmd()[0], instance.fan_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.cmd()[0], instance.cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!move(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::unitree_hx::msg::dds_::LowCmd_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowCmd_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::unitree_hx::msg::dds_::LowCmd_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.head()[0], instance.head().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.version()[0], instance.version().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, false))
        return false;
      for (const auto & a_1:instance.motor_cmd()) {  //array depth 1
      if (!max(streamer, a_1, prop))
        return false;
      }  //array depth 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.bms_cmd(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.led_cmd()[0], instance.led_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 5:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.fan_cmd()[0], instance.fan_cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 6:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.cmd()[0], instance.cmd().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 7:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.data()[0], instance.data().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 8:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(true, true))
        return false;
      if (!max(streamer, instance.reserve()[0], instance.reserve().size()))
        return false;
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 9:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.crc()))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::unitree_hx::msg::dds_::LowCmd_& instance, bool as_key) {
  auto &props = get_type_props<::unitree_hx::msg::dds_::LowCmd_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_LOWCMD_HX_HPP
