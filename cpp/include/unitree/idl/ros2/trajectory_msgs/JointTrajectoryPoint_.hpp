/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: JointTrajectoryPoint_.idl
  Source: JointTrajectoryPoint_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_JOINTTRAJECTORYPOINT__HPP
#define DDSCXX_JOINTTRAJECTORYPOINT__HPP

#include "Duration_.hpp"

#include <vector>

namespace trajectory_msgs
{
namespace msg
{
namespace dds_
{
class JointTrajectoryPoint_
{
private:
 std::vector<double> positions_;
 std::vector<double> velocities_;
 std::vector<double> accelerations_;
 std::vector<double> effort_;
 ::builtin_interfaces::msg::dds_::Duration_ time_from_start_;

public:
  JointTrajectoryPoint_() = default;

  explicit JointTrajectoryPoint_(
    const std::vector<double>& positions,
    const std::vector<double>& velocities,
    const std::vector<double>& accelerations,
    const std::vector<double>& effort,
    const ::builtin_interfaces::msg::dds_::Duration_& time_from_start) :
    positions_(positions),
    velocities_(velocities),
    accelerations_(accelerations),
    effort_(effort),
    time_from_start_(time_from_start) { }

  const std::vector<double>& positions() const { return this->positions_; }
  std::vector<double>& positions() { return this->positions_; }
  void positions(const std::vector<double>& _val_) { this->positions_ = _val_; }
  void positions(std::vector<double>&& _val_) { this->positions_ = _val_; }
  const std::vector<double>& velocities() const { return this->velocities_; }
  std::vector<double>& velocities() { return this->velocities_; }
  void velocities(const std::vector<double>& _val_) { this->velocities_ = _val_; }
  void velocities(std::vector<double>&& _val_) { this->velocities_ = _val_; }
  const std::vector<double>& accelerations() const { return this->accelerations_; }
  std::vector<double>& accelerations() { return this->accelerations_; }
  void accelerations(const std::vector<double>& _val_) { this->accelerations_ = _val_; }
  void accelerations(std::vector<double>&& _val_) { this->accelerations_ = _val_; }
  const std::vector<double>& effort() const { return this->effort_; }
  std::vector<double>& effort() { return this->effort_; }
  void effort(const std::vector<double>& _val_) { this->effort_ = _val_; }
  void effort(std::vector<double>&& _val_) { this->effort_ = _val_; }
  const ::builtin_interfaces::msg::dds_::Duration_& time_from_start() const { return this->time_from_start_; }
  ::builtin_interfaces::msg::dds_::Duration_& time_from_start() { return this->time_from_start_; }
  void time_from_start(const ::builtin_interfaces::msg::dds_::Duration_& _val_) { this->time_from_start_ = _val_; }
  void time_from_start(::builtin_interfaces::msg::dds_::Duration_&& _val_) { this->time_from_start_ = _val_; }

  bool operator==(const JointTrajectoryPoint_& _other) const
  {
    (void) _other;
    return positions_ == _other.positions_ &&
      velocities_ == _other.velocities_ &&
      accelerations_ == _other.accelerations_ &&
      effort_ == _other.effort_ &&
      time_from_start_ == _other.time_from_start_;
  }

  bool operator!=(const JointTrajectoryPoint_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::getTypeName()
{
  return "trajectory_msgs::msg::dds_::JointTrajectoryPoint_";
}

template <> constexpr bool TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::type_map_blob_sz() { return 728; }
template<> constexpr unsigned int TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::type_info_blob_sz() { return 148; }
template<> inline const uint8_t * TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::type_map_blob() {
  static const uint8_t blob[] = {
 0xdf,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf1,  0x3c,  0x69,  0xd7,  0x9c,  0x74,  0x38,  0xf9, 
 0xc3,  0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0x00,  0x81,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a, 
 0x36,  0x5a,  0x4a,  0x97,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x0a,  0x64,  0xd8,  0x02,  0x06,  0x10,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0xa5,  0x57,  0x52,  0x85,  0x10,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x74,  0x04,  0x57,  0x01, 
 0x19,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54, 
 0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0xfb,  0x90,  0x69,  0xa4,  0xf1,  0x56,  0x7c, 
 0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x33,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74, 
 0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2, 
 0x04,  0x64,  0xd5,  0x00,  0xaa,  0x01,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0xbb,  0x24,  0xed, 
 0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0x00,  0x06,  0x01,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x3a,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x32,  0x00,  0x00,  0x00, 
 0x74,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74,  0x6f,  0x72,  0x79,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a, 
 0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e, 
 0x74,  0x54,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74,  0x6f,  0x72,  0x79,  0x50,  0x6f,  0x69,  0x6e,  0x74, 
 0x5f,  0x00,  0x00,  0x00,  0xbe,  0x00,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x0a,  0x00,  0x00,  0x00, 
 0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e,  0x73,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x0b,  0x00,  0x00,  0x00, 
 0x76,  0x65,  0x6c,  0x6f,  0x63,  0x69,  0x74,  0x69,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x20,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a, 
 0x0e,  0x00,  0x00,  0x00,  0x61,  0x63,  0x63,  0x65,  0x6c,  0x65,  0x72,  0x61,  0x74,  0x69,  0x6f,  0x6e, 
 0x73,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x0a,  0x07,  0x00,  0x00,  0x00,  0x65,  0x66,  0x66,  0x6f,  0x72,  0x74,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x2e,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xbc, 
 0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00,  0x00,  0x00, 
 0x10,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65,  0x5f,  0x66,  0x72,  0x6f,  0x6d,  0x5f,  0x73,  0x74, 
 0x61,  0x72,  0x74,  0x00,  0x00,  0x00,  0xf2,  0xbc,  0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f, 
 0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00,  0x00,  0x00,  0x76,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00, 
 0x31,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x29,  0x00,  0x00,  0x00,  0x62,  0x75,  0x69,  0x6c, 
 0x74,  0x69,  0x6e,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63,  0x65,  0x73,  0x3a,  0x3a, 
 0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x44,  0x75,  0x72,  0x61,  0x74, 
 0x69,  0x6f,  0x6e,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x40,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0xf2,  0xbb,  0x24,  0xed, 
 0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0xf1,  0x3c,  0x69,  0xd7,  0x9c, 
 0x74,  0x38,  0xf9,  0xc3,  0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0xf2,  0xbc,  0x04,  0xfa,  0x47,  0x9e, 
 0x1a,  0xec,  0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c, 
 0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x90,  0x00,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x3c,  0x69,  0xd7,  0x9c,  0x74,  0x38,  0xf9,  0xc3,  0x16,  0xaa,  0xb4, 
 0x37,  0xa0,  0x69,  0x00,  0x85,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b, 
 0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x00,  0x37,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x40,  0x00,  0x00,  0x00,  0x3c,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xbb,  0x24,  0xed, 
 0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0x00,  0x0a,  0x01,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xbc,  0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00, 
 0x7a,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::trajectory_msgs::msg::dds_::JointTrajectoryPoint_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.positions().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.positions()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.velocities().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.velocities()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.accelerations().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.accelerations()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.effort().size());
      if (!write(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !write(streamer, instance.effort()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.time_from_start(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.positions().size());
      if (!read(streamer, se_1))
        return false;
      instance.positions().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.positions()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.velocities().size());
      if (!read(streamer, se_1))
        return false;
      instance.velocities().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.velocities()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.accelerations().size());
      if (!read(streamer, se_1))
        return false;
      instance.accelerations().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.accelerations()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.effort().size());
      if (!read(streamer, se_1))
        return false;
      instance.effort().resize(se_1);
      if (se_1 > 0 &&
          !read(streamer, instance.effort()[0], se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.time_from_start(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.positions().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.velocities().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.accelerations().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.effort().size());
      if (!move(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !move(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.time_from_start(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 3:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, true))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      if (se_1 > 0 &&
          !max(streamer, double(), se_1))
        return false;
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 4:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.time_from_start(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectoryPoint_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_JOINTTRAJECTORYPOINT__HPP
