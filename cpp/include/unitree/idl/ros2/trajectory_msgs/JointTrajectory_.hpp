/****************************************************************

  Generated by Eclipse Cyclone DDS IDL to CXX Translator
  File name: JointTrajectory_.idl
  Source: JointTrajectory_.hpp
  Cyclone DDS: v0.10.2

*****************************************************************/
#ifndef DDSCXX_JOINTTRAJECTORY__HPP
#define DDSCXX_JOINTTRAJECTORY__HPP

#include "Header_.hpp"

#include "JointTrajectoryPoint_.hpp"

#include <vector>
#include <string>

namespace trajectory_msgs
{
namespace msg
{
namespace dds_
{
class JointTrajectory_
{
private:
 ::std_msgs::msg::dds_::Header_ header_;
 std::vector<std::string> joint_names_;
 std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_> points_;

public:
  JointTrajectory_() = default;

  explicit JointTrajectory_(
    const ::std_msgs::msg::dds_::Header_& header,
    const std::vector<std::string>& joint_names,
    const std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>& points) :
    header_(header),
    joint_names_(joint_names),
    points_(points) { }

  const ::std_msgs::msg::dds_::Header_& header() const { return this->header_; }
  ::std_msgs::msg::dds_::Header_& header() { return this->header_; }
  void header(const ::std_msgs::msg::dds_::Header_& _val_) { this->header_ = _val_; }
  void header(::std_msgs::msg::dds_::Header_&& _val_) { this->header_ = _val_; }
  const std::vector<std::string>& joint_names() const { return this->joint_names_; }
  std::vector<std::string>& joint_names() { return this->joint_names_; }
  void joint_names(const std::vector<std::string>& _val_) { this->joint_names_ = _val_; }
  void joint_names(std::vector<std::string>&& _val_) { this->joint_names_ = _val_; }
  const std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>& points() const { return this->points_; }
  std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>& points() { return this->points_; }
  void points(const std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>& _val_) { this->points_ = _val_; }
  void points(std::vector<::trajectory_msgs::msg::dds_::JointTrajectoryPoint_>&& _val_) { this->points_ = _val_; }

  bool operator==(const JointTrajectory_& _other) const
  {
    (void) _other;
    return header_ == _other.header_ &&
      joint_names_ == _other.joint_names_ &&
      points_ == _other.points_;
  }

  bool operator!=(const JointTrajectory_& _other) const
  {
    return !(*this == _other);
  }

};

}

}

}

#include "dds/topic/TopicTraits.hpp"
#include "org/eclipse/cyclonedds/topic/datatopic.hpp"

namespace org {
namespace eclipse {
namespace cyclonedds {
namespace topic {

template <> constexpr const char* TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::getTypeName()
{
  return "trajectory_msgs::msg::dds_::JointTrajectory_";
}

template <> constexpr bool TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::isSelfContained()
{
  return false;
}

template <> constexpr bool TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::isKeyless()
{
  return true;
}

#ifdef DDSCXX_HAS_TYPE_DISCOVERY
template<> constexpr unsigned int TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::type_map_blob_sz() { return 1610; }
template<> constexpr unsigned int TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::type_info_blob_sz() { return 268; }
template<> inline const uint8_t * TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::type_map_blob() {
  static const uint8_t blob[] = {
 0x03,  0x02,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00,  0xf1,  0x85,  0x53,  0x9a,  0xcf,  0x0b,  0x02,  0xb3, 
 0x81,  0x99,  0x07,  0x78,  0x57,  0x1c,  0x5d,  0x00,  0x6e,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x5e,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00, 
 0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd, 
 0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0x09,  0x9f,  0xb9,  0x95,  0x00,  0x00,  0x00, 
 0x11,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x70, 
 0x00,  0x0f,  0x4a,  0x0f,  0x9f,  0x00,  0x00,  0x00,  0x1e,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf1,  0x01,  0x00,  0x00,  0xf1,  0x3c,  0x69,  0xd7,  0x9c,  0x74,  0x38,  0xf9,  0xc3, 
 0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0x0a,  0xab,  0x81,  0xde,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd, 
 0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0x00,  0x00,  0x00,  0x44,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x34,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x56, 
 0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x96,  0xb8,  0xc7, 
 0x8d,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00, 
 0x4b,  0xb3,  0x9c,  0x5c,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba, 
 0x46,  0xf9,  0x8d,  0x00,  0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0xf1,  0x3c,  0x69,  0xd7,  0x9c, 
 0x74,  0x38,  0xf9,  0xc3,  0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0x00,  0x00,  0x81,  0x00,  0x00,  0x00, 
 0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x71,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x0a,  0x36,  0x5a,  0x4a,  0x97,  0x10,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x64,  0xd8,  0x02,  0x06,  0x10,  0x00,  0x00,  0x00, 
 0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0xa5,  0x57,  0x52,  0x85, 
 0x10,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a, 
 0x74,  0x04,  0x57,  0x01,  0x19,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf1,  0x56, 
 0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0xfb,  0x90,  0x69, 
 0xa4,  0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d, 
 0x33,  0x00,  0x00,  0x00,  0xf1,  0x51,  0x01,  0x00,  0x01,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x23,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x74,  0x45,  0x9c,  0xa3,  0x00,  0x0b,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0xe2,  0x04,  0x64,  0xd5,  0x00,  0x9e,  0x03,  0x00,  0x00,  0x05,  0x00,  0x00,  0x00, 
 0xf2,  0x75,  0x8b,  0xf2,  0x44,  0xf5,  0x5f,  0x17,  0x4a,  0xc1,  0x6c,  0x85,  0x82,  0x24,  0x66,  0x00, 
 0xc9,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x35,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x2d,  0x00,  0x00,  0x00,  0x74,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74,  0x6f,  0x72,  0x79,  0x5f,  0x6d, 
 0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a, 
 0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x54,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74,  0x6f,  0x72,  0x79,  0x5f, 
 0x00,  0x00,  0x00,  0x00,  0x85,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed, 
 0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x00,  0x00,  0x00,  0x07,  0x00,  0x00,  0x00,  0x68,  0x65,  0x61,  0x64, 
 0x65,  0x72,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x22,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x70,  0x00,  0x00,  0x00,  0x00,  0x0c,  0x00,  0x00,  0x00, 
 0x6a,  0x6f,  0x69,  0x6e,  0x74,  0x5f,  0x6e,  0x61,  0x6d,  0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf2,  0x01,  0x00,  0x00,  0xf2, 
 0xbb,  0x24,  0xed,  0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0x00,  0x00, 
 0x07,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x69,  0x6e,  0x74,  0x73,  0x00,  0x00,  0x00,  0xf2,  0xe5,  0x76, 
 0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x7b,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x25,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00, 
 0x73,  0x74,  0x64,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64, 
 0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x48,  0x65,  0x61,  0x64,  0x65,  0x72,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x47,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x24,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32, 
 0x0d,  0x00,  0x00,  0x00,  0x06,  0x00,  0x00,  0x00,  0x73,  0x74,  0x61,  0x6d,  0x70,  0x00,  0x00,  0x00, 
 0x17,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x70,  0x00,  0x09,  0x00,  0x00,  0x00, 
 0x66,  0x72,  0x61,  0x6d,  0x65,  0x5f,  0x69,  0x64,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13, 
 0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x00,  0x72,  0x00,  0x00,  0x00, 
 0xf2,  0x51,  0x01,  0x00,  0x2d,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x25,  0x00,  0x00,  0x00, 
 0x62,  0x75,  0x69,  0x6c,  0x74,  0x69,  0x6e,  0x5f,  0x69,  0x6e,  0x74,  0x65,  0x72,  0x66,  0x61,  0x63, 
 0x65,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73,  0x5f,  0x3a,  0x3a,  0x54, 
 0x69,  0x6d,  0x65,  0x5f,  0x00,  0x00,  0x00,  0x00,  0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00, 
 0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00,  0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00, 
 0x00,  0x00,  0xf2,  0xbb,  0x24,  0xed,  0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf, 
 0x7a,  0x00,  0x00,  0x00,  0x06,  0x01,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x3a,  0x00,  0x00,  0x00, 
 0x00,  0x00,  0x00,  0x00,  0x32,  0x00,  0x00,  0x00,  0x74,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74,  0x6f, 
 0x72,  0x79,  0x5f,  0x6d,  0x73,  0x67,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64, 
 0x73,  0x5f,  0x3a,  0x3a,  0x4a,  0x6f,  0x69,  0x6e,  0x74,  0x54,  0x72,  0x61,  0x6a,  0x65,  0x63,  0x74, 
 0x6f,  0x72,  0x79,  0x50,  0x6f,  0x69,  0x6e,  0x74,  0x5f,  0x00,  0x00,  0x00,  0xbe,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0x1c,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x0a,  0x0a,  0x00,  0x00,  0x00,  0x70,  0x6f,  0x73,  0x69,  0x74,  0x69,  0x6f,  0x6e, 
 0x73,  0x00,  0x00,  0x00,  0x1d,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3, 
 0x01,  0x00,  0x00,  0x0a,  0x0b,  0x00,  0x00,  0x00,  0x76,  0x65,  0x6c,  0x6f,  0x63,  0x69,  0x74,  0x69, 
 0x65,  0x73,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x20,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x0e,  0x00,  0x00,  0x00,  0x61,  0x63,  0x63,  0x65, 
 0x6c,  0x65,  0x72,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x73,  0x00,  0x00,  0x00,  0x19,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x01,  0x00,  0x80,  0xf3,  0x01,  0x00,  0x00,  0x0a,  0x07,  0x00,  0x00,  0x00, 
 0x65,  0x66,  0x66,  0x6f,  0x72,  0x74,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x2e,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x01,  0x00,  0xf2,  0xbc,  0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f, 
 0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00,  0x00,  0x00,  0x10,  0x00,  0x00,  0x00,  0x74,  0x69,  0x6d,  0x65, 
 0x5f,  0x66,  0x72,  0x6f,  0x6d,  0x5f,  0x73,  0x74,  0x61,  0x72,  0x74,  0x00,  0x00,  0x00,  0xf2,  0xbc, 
 0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00,  0x00,  0x00, 
 0x76,  0x00,  0x00,  0x00,  0xf2,  0x51,  0x01,  0x00,  0x31,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x29,  0x00,  0x00,  0x00,  0x62,  0x75,  0x69,  0x6c,  0x74,  0x69,  0x6e,  0x5f,  0x69,  0x6e,  0x74,  0x65, 
 0x72,  0x66,  0x61,  0x63,  0x65,  0x73,  0x3a,  0x3a,  0x6d,  0x73,  0x67,  0x3a,  0x3a,  0x64,  0x64,  0x73, 
 0x5f,  0x3a,  0x3a,  0x44,  0x75,  0x72,  0x61,  0x74,  0x69,  0x6f,  0x6e,  0x5f,  0x00,  0x00,  0x00,  0x00, 
 0x36,  0x00,  0x00,  0x00,  0x02,  0x00,  0x00,  0x00,  0x12,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x01,  0x00,  0x04,  0x00,  0x04,  0x00,  0x00,  0x00,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00, 
 0x16,  0x00,  0x00,  0x00,  0x01,  0x00,  0x00,  0x00,  0x01,  0x00,  0x07,  0x00,  0x08,  0x00,  0x00,  0x00, 
 0x6e,  0x61,  0x6e,  0x6f,  0x73,  0x65,  0x63,  0x00,  0x00,  0x00,  0x00,  0x00,  0x9a,  0x00,  0x00,  0x00, 
 0x05,  0x00,  0x00,  0x00,  0xf2,  0x75,  0x8b,  0xf2,  0x44,  0xf5,  0x5f,  0x17,  0x4a,  0xc1,  0x6c,  0x85, 
 0x82,  0x24,  0x66,  0xf1,  0x85,  0x53,  0x9a,  0xcf,  0x0b,  0x02,  0xb3,  0x81,  0x99,  0x07,  0x78,  0x57, 
 0x1c,  0x5d,  0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a, 
 0x55,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71,  0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2, 
 0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d,  0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0xf1, 
 0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0xf2,  0xbb, 
 0x24,  0xed,  0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0xf1,  0x3c,  0x69, 
 0xd7,  0x9c,  0x74,  0x38,  0xf9,  0xc3,  0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0xf2,  0xbc,  0x04,  0xfa, 
 0x47,  0x9e,  0x1a,  0xec,  0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0xf1,  0x56,  0x7c,  0x5a,  0x93, 
 0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d, };
  return blob;
}
template<> inline const uint8_t * TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::type_info_blob() {
  static const uint8_t blob[] = {
 0x08,  0x01,  0x00,  0x00,  0x01,  0x10,  0x00,  0x40,  0x70,  0x00,  0x00,  0x00,  0x6c,  0x00,  0x00,  0x00, 
 0x14,  0x00,  0x00,  0x00,  0xf1,  0x85,  0x53,  0x9a,  0xcf,  0x0b,  0x02,  0xb3,  0x81,  0x99,  0x07,  0x78, 
 0x57,  0x1c,  0x5d,  0x00,  0x72,  0x00,  0x00,  0x00,  0x03,  0x00,  0x00,  0x00,  0x4c,  0x00,  0x00,  0x00, 
 0x03,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0xdc,  0xf1,  0x2c,  0xd2,  0xdd,  0x5e,  0x71, 
 0x2c,  0xb7,  0xb1,  0xe5,  0x1f,  0xa3,  0xf2,  0x00,  0x48,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf1,  0x56,  0x7c,  0x5a,  0x93,  0x54,  0x1c,  0x3b,  0x10,  0x86,  0xa4,  0xba,  0x46,  0xf9,  0x8d,  0x00, 
 0x37,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf1,  0x3c,  0x69,  0xd7,  0x9c,  0x74,  0x38,  0xf9, 
 0xc3,  0x16,  0xaa,  0xb4,  0x37,  0xa0,  0x69,  0x00,  0x85,  0x00,  0x00,  0x00,  0x02,  0x10,  0x00,  0x40, 
 0x88,  0x00,  0x00,  0x00,  0x84,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0x75,  0x8b,  0xf2, 
 0x44,  0xf5,  0x5f,  0x17,  0x4a,  0xc1,  0x6c,  0x85,  0x82,  0x24,  0x66,  0x00,  0xcd,  0x00,  0x00,  0x00, 
 0x04,  0x00,  0x00,  0x00,  0x64,  0x00,  0x00,  0x00,  0x04,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xe5,  0x76,  0x5e,  0xc4,  0x8c,  0xff,  0xd4,  0x19,  0xed,  0x7f,  0xe8,  0x4e,  0x2a,  0x55,  0x00, 
 0x7f,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xd4,  0x85,  0x4f,  0x13,  0xae,  0xf3,  0x2d, 
 0xfe,  0x21,  0x57,  0xf3,  0xe6,  0x32,  0x0d,  0x00,  0x76,  0x00,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00, 
 0xf2,  0xbb,  0x24,  0xed,  0xd1,  0xe2,  0x3c,  0x19,  0x22,  0x7a,  0x07,  0x1b,  0x46,  0xbf,  0x7a,  0x00, 
 0x0a,  0x01,  0x00,  0x00,  0x14,  0x00,  0x00,  0x00,  0xf2,  0xbc,  0x04,  0xfa,  0x47,  0x9e,  0x1a,  0xec, 
 0x2b,  0x6f,  0xf6,  0xfb,  0xcd,  0x08,  0x2c,  0x00,  0x7a,  0x00,  0x00,  0x00, };
  return blob;
}
#endif //DDSCXX_HAS_TYPE_DISCOVERY

} //namespace topic
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

namespace dds {
namespace topic {

template <>
struct topic_type_name<::trajectory_msgs::msg::dds_::JointTrajectory_>
{
    static std::string value()
    {
      return org::eclipse::cyclonedds::topic::TopicTraits<::trajectory_msgs::msg::dds_::JointTrajectory_>::getTypeName();
    }
};

}
}

REGISTER_TOPIC_TYPE(::trajectory_msgs::msg::dds_::JointTrajectory_)

namespace org{
namespace eclipse{
namespace cyclonedds{
namespace core{
namespace cdr{

template<>
propvec &get_type_props<::trajectory_msgs::msg::dds_::JointTrajectory_>();

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool write(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!write(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.joint_names().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write_string(streamer, instance.joint_names()[i_1], 0))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!write(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!write(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool write(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectory_>();
  str.set_mode(cdr_stream::stream_mode::write, as_key);
  return write(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool read(T& streamer, ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!read(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.joint_names().size());
      if (!read(streamer, se_1))
        return false;
      instance.joint_names().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read_string(streamer, instance.joint_names()[i_1], 0))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!read(streamer, se_1))
        return false;
      instance.points().resize(se_1);
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!read(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool read(S& str, ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectory_>();
  str.set_mode(cdr_stream::stream_mode::read, as_key);
  return read(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool move(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!move(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.joint_names().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move_string(streamer, instance.joint_names()[i_1], 0))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = uint32_t(instance.points().size());
      if (!move(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!move(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool move(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectory_>();
  str.set_mode(cdr_stream::stream_mode::move, as_key);
  return move(str, instance, props.data()); 
}

template<typename T, std::enable_if_t<std::is_base_of<cdr_stream, T>::value, bool> = true >
bool max(T& streamer, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, entity_properties_t *props) {
  (void)instance;
  if (!streamer.start_struct(*props))
    return false;
  auto prop = streamer.first_entity(props);
  while (prop) {
    switch (prop->m_id) {
      case 0:
      if (!streamer.start_member(*prop))
        return false;
      if (!max(streamer, instance.header(), prop))
        return false;
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 1:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max_string(streamer, instance.joint_names()[i_1], 0))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
      case 2:
      if (!streamer.start_member(*prop))
        return false;
      if (!streamer.start_consecutive(false, false))
        return false;
      {
      uint32_t se_1 = 0;
      if (!max(streamer, se_1))
        return false;
      for (uint32_t i_1 = 0; i_1 < se_1; i_1++) {
      if (!max(streamer, instance.points()[i_1], prop))
        return false;
      }  //i_1
      }  //end sequence 1
      if (!streamer.finish_consecutive())
        return false;
      streamer.position(SIZE_MAX);
      if (!streamer.finish_member(*prop))
        return false;
      break;
    }
    prop = streamer.next_entity(prop);
  }
  return streamer.finish_struct(*props);
}

template<typename S, std::enable_if_t<std::is_base_of<cdr_stream, S>::value, bool> = true >
bool max(S& str, const ::trajectory_msgs::msg::dds_::JointTrajectory_& instance, bool as_key) {
  auto &props = get_type_props<::trajectory_msgs::msg::dds_::JointTrajectory_>();
  str.set_mode(cdr_stream::stream_mode::max, as_key);
  return max(str, instance, props.data()); 
}

} //namespace cdr
} //namespace core
} //namespace cyclonedds
} //namespace eclipse
} //namespace org

#endif // DDSCXX_JOINTTRAJECTORY__HPP
